import java.awt.image.BufferedImage;

public class ObjectTracker {
	private RegionOfInterest ROI;
	private int[] colors;
	private int threshold;

	public ObjectTracker(RegionOfInterest ROI, int[] rgb, int threshold) {
		this.ROI = ROI;
		this.threshold = threshold;
		colors = rgb;
	}

	public void trackObject(BufferedImage image) {
		// take the average position of all the pixels that
		// are close enough to the colors array in this class
		int x = 0;
		int y = 0;
		int weight = 0;
		// compute the weighted mean of the all the points in the region of interest
		for (int r = ROI.getTop(); r < ROI.getSize() + ROI.getTop(); r++) {
			for (int c = ROI.getLeft(); c < ROI.getSize() + ROI.getLeft(); c++) {
				int pWeight = pixelWeight(image.getRGB(r, c));
				y += (r * weight);
				x += (c * weight);
				weight += pWeight;
			}
		}

		if (x/counter - ROI.getSize()/2 > 0) {
			ROI.setX(x/weight);
			System.out.println("changing x");
		}
		if (y/counter - ROI.getSize()/2 > 0) {
			ROI.setY(y/weight);
			System.out.println("changing y");
		}

		System.out.println(ROI);
	}

	public int pixelDistance(int rgb) {
		int red = Math.abs(((rgb >> 16) & 0xFF) - colors[0]);
		int green = Math.abs(((rgb >> 8) & 0xFF) - colors[1]);
		int blue = Math.abs(((rgb & 0xFF) & 0xFF) - colors[2]);

		return Math.max(Math.max(red, green), blue);
	}

	public double pixelWeight(int rgb) {
		int red = (rgb >> 16) & 0xFF;
		int green = (rgb >> 8) & 0xFF;
		int blue = (rgb & 0xFF);

		return Math.exp(-(k*Math.pow(pixelDistance(rgb),2)));
	}
}
